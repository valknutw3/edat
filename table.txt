#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "table.h"
#include "../type/type.h"

struct table_ {
   	FILE *pf;
	int col_no;
	type_t *types;
};

void table_create(char* path, int ncols, type_t* types) {
	FILE *pf;
	int i;

	pf=fopen(path, "w");

	fwrite(&ncols, 1, sizeof(int), pf);
	for(i=0; i<ncols; i++)
		fwrite(types+i, 1, sizeof(type_t), pf);

	fclose(pf);
	return;
}

table_t* table_open(char* path) {	/*we keep the file open until the end, so the rest of the functions know where to act*/
    	int i;
	FILE *pf = fopen(path, "r+");
	if(!pf) return NULL;
	table_t *t= (table_t *)malloc(sizeof(table_t));
	fread(&(t->col_no), 1, sizeof(int), t->pf);
	t->types = (type_t *)malloc(t->col_no*sizeof(type_t));

	for(i=0;i<t->col_no;i++){
		fread(t->types+i, 1, sizeof(type_t), pf);		
	}
	return t;
}

void table_close(table_t* table) {
	    fclose(table->pf);
}

int table_ncols(table_t* table) {
    return table->cols_no;
}

type_t* table_types(table_t* table) {
    return table->types;
}

long table_first_pos(table_t* table) {
   
	if(!table) return -1;
	return table->col_no+1;
}

long table_last_pos(table_t* table) {
	
	if(!table) return -1;	/*hacer contador y devolverlo*/
    	return (long) fseek(table->pf, 0L, SEEK_END);
}

record_t* table_read_record(table_t* table, long pos) {
  	
	int i;/*aqui tenemos que reservar memoria, y no liberar punteros porque pertenecen al record*/

	if(!fseek(table->pf, pos, SEEK_SET)) return NULL;
	for(i=0;i<table->col_no;i++){
		fread();
	}
}

void table_insert_record(table_t* table, void** values) {
   	int i, len;

	for(i=0, len=0;i<t->col_no;i++)
		len+=value_lenght(table->types[i], values[i]);

	len=sizeof(int);
	fseek(table->pf, 0L, SEEK_END);
	fwrite(&len, 1, sizeof(int), table->pf);
	
	for(i=0;i<table->col_no;i++)
		fwrite(values[i], 1, value_lenght(table->types[i], values[i]), table->pf);

	return;
}









